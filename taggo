#!/usr/bin/env python

import sys
import os
import ConfigParser

class Taggo:
    config = None

    def __init__(self):
        self.mydir = os.path.dirname(os.path.abspath(__file__))
        self.config_file = '%s/taggo.cfg' % self.mydir
        if not os.path.isfile(self.config_file):
            print 'Writing default config to %s\n' % self.config_file
            self.write_config()

        self.config = ConfigParser.ConfigParser()
        self.config.read(self.config_file)

    def write_config(self):
        config = ConfigParser.RawConfigParser()
        config.add_section('paths')
        config.set('paths', 'main_folder', './test ; Full path or relative to taggo script folder if it starts with ./')
        config.set('paths', 'tag_folder', './tags ; Full path or relative to your main_folder if it starts with ./')

        config_fp = open(self.config_file, 'wb')
        config.write(config_fp)
        config_fp.close()

    def get_config(self, section, item):
        try:
            return self.config.get(section, item)
        except (ConfigParser.NoOptionError, ConfigParser.NoSectionError), e:
            print 'Configuration error: %s' % e
            sys.exit(2)

    def help(self):
        print """
Usage: taggo option

A defalt configuration file will be written if it doesnt exists.

Options:
  help           This help
  test           Test what taggo will do
"""

    def test(self):
        pass

if __name__ == '__main__':
    taggo = Taggo()

    valid_args = ['test', 'help']

    try:
        arg = sys.argv[1]
    except IndexError:
        arg = 'help'

    if arg not in valid_args: arg = 'help'

    if arg == 'help': taggo.help()
    if arg == 'test': taggo.test()
    print taggo.mydir
