#!/usr/bin/env python

"""
TODO:
  What to do when renaming/adding tags to a filename, symlink will be dead..
"""

import sys
import os
import re
import ConfigParser

class Taggo:
    config = None
    content_folder = ''
    tags_folder = ''

    def __init__(self):
        self.mydir = os.path.dirname(os.path.abspath(__file__))
        self.config_file = '%s/taggo.cfg' % self.mydir
        if not os.path.isfile(self.config_file):
            print 'Writing default config to %s\n' % self.config_file
            self.write_config()

        self.config = ConfigParser.RawConfigParser()
        self.config.read(self.config_file)

        self.content_folder = self._get_fullpath('content_folder')
        self.tags_folder = self._get_fullpath('tag_folder')

    def _get_fullpath(self, config_name):
        raw_folder = self.get_config('paths', config_name)
        if raw_folder[0] == '.':
            # Assume relativ path to the script home, as in the docs
            return os.path.abspath('%s/%s' % (self.mydir, raw_folder))
        else:
            return os.path.abspath(raw_folder)

    def help(self):
        print 'Usage: taggo option\n'
        print 'A defalt configuration file will be written if it doesnt exists.\n'
        print 'Options:'
        print '  help           This help'
        print '  make_tags      Create missing symlink tags'

    def write_config(self):
        config = ConfigParser.RawConfigParser()
        config.add_section('general')
        config.set('general', 'subtag_separator', '- ; Character to split the tag into sub-tags on.')
        config.set('general', 'folder_to_tag_replacer', '_ ; Character that replaces the / when creating tagfiles')
        config.set('general', 'tag_filenames', '%(relative_paths_names)s - %(full_filename)s')

        config.add_section('paths')
        config.set('paths', 'content_folder', './pictures ; Full path or relative to main_folder if it starts with ./')
        config.set('paths', 'tag_folder', './tags ; Full path or relative to main_folder if it starts with ./')

        config_fp = open(self.config_file, 'wb')
        config.write(config_fp)
        config_fp.close()

    def get_config(self, section, item):
        try:
            return self.config.get(section, item)
        except (ConfigParser.NoOptionError, ConfigParser.NoSectionError), e:
            print 'Configuration error: %s' % e
            sys.exit(2)

    def make_tags(self):
        """
        Function that goes trough and creates missing tag folders and missing symlinks
        """

        folder_to_tag_replacer = self.get_config('general', 'folder_to_tag_replacer')
        subtag_separator = self.get_config('general', 'subtag_separator')
        tag_filenames = self.get_config('general', 'tag_filenames')

        for root, dirs, files in os.walk(self.content_folder):
            if files:
                replacer = {}
                if root == self.content_folder:
                    # We got loose files in our content folder..
                    path = ['']
                else:
                    path = root.replace(self.content_folder + '/', '', 1).split('/')

                replacer['last_path_name'] = path[-1:][0]
                replacer['relative_paths_names'] = folder_to_tag_replacer.join(path)
                for f in files:
                    file_path = '%s/%s' % (root, f)
                    f_split = f.split(' ')
                    if len(f_split) <= 1:
                        continue # Didnt find any tags, we asume a space means it have tags..

                    file_id = f_split.pop(0) # Away with the file ID, and grab file_id
                    f_tags = ' '.join(f_split).split('.')[:-1] # Away with fileext

                    replacer['full_filename'] = f
                    replacer['file_id'] = file_id

                    print '=', file_path
                    for t in ' '.join(f_tags).split(','):
                        tag = t.strip().replace(subtag_separator, '/')
                        tag_folder = '%s/%s' % (self.tags_folder, tag)
                        tag_filename = tag_filenames % replacer

                        if not os.path.isdir(tag_folder):
                            os.makedirs(tag_folder)

                        symlink_path = '%s/%s' % (tag_folder, tag_filename)
                        if not os.path.islink(symlink_path):
                            os.symlink(file_path, symlink_path)

                        print '>', symlink_path
                    print

if __name__ == '__main__':
    taggo = Taggo()

    valid_args = ['help', 'make_tags']

    try:
        arg = sys.argv[1]
    except IndexError:
        arg = 'help'

    if arg not in valid_args: arg = 'help'

    if arg == 'help': taggo.help()
    if arg == 'make_tags': taggo.make_tags()
